{"id":55,"fid":"55","name":"跳跃游戏","slug":"jump-game","link":"https://leetcode.cn/problems/jump-game/description/","percent":43.55423569034818,"level":"Medium","category":"algorithms","en_name":"Jump Game","cn_name":"跳跃游戏","totalAC":"1.2M","totalSubmit":"2.8M","likes":3031,"dislikes":0,"desc":"<p>给你一个非负整数数组&nbsp;<code>nums</code> ，你最初位于数组的 <strong>第一个下标</strong> 。数组中的每个元素代表你在该位置可以跳跃的最大长度。</p>\n\n<p>判断你是否能够到达最后一个下标，如果可以，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [2,3,1,1,4]\n<strong>输出：</strong>true\n<strong>解释：</strong>可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。\n</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [3,2,1,0,4]\n<strong>输出：</strong>false\n<strong>解释：</strong>无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool canJump(vector<int>& nums) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean canJump(int[] nums) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        "},{"value":"c","text":"C","defaultCode":"bool canJump(int* nums, int numsSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool CanJump(int[] nums) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canJump = function(nums) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function canJump(nums: number[]): boolean {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function canJump($nums) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func canJump(_ nums: [Int]) -> Bool {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun canJump(nums: IntArray): Boolean {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  bool canJump(List<int> nums) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func canJump(nums []int) bool {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Boolean}\ndef can_jump(nums)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def canJump(nums: Array[Int]): Boolean = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn can_jump(nums: Vec<i32>) -> bool {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (can-jump nums)\n  (-> (listof exact-integer?) boolean?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec can_jump(Nums :: [integer()]) -> boolean().\ncan_jump(Nums) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec can_jump(nums :: [integer]) :: boolean\n  def can_jump(nums) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func canJump(nums: Array<Int64>): Bool {\n\n    }\n}"}],"testcase":"[2,3,1,1,4]","testable":true,"templateMeta":{"name":"canJump","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"boolean"}}}