{"id":301,"fid":"301","name":"删除无效的括号","slug":"remove-invalid-parentheses","link":"https://leetcode.cn/problems/remove-invalid-parentheses/description/","percent":55.54888441276728,"level":"Hard","category":"algorithms","en_name":"Remove Invalid Parentheses","cn_name":"删除无效的括号","totalAC":"119K","totalSubmit":"213.7K","likes":969,"dislikes":0,"desc":"<p>给你一个由若干括号和字母组成的字符串 <code>s</code> ，删除最小数量的无效括号，使得输入的字符串有效。</p>\n\n<p>返回所有可能的结果。答案可以按 <strong>任意顺序</strong> 返回。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"()())()\"\n<strong>输出：</strong>[\"(())()\",\"()()()\"]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"(a)())()\"\n<strong>输出：</strong>[\"(a())()\",\"(a)()()\"]\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \")(\"\n<strong>输出：</strong>[\"\"]\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 <= s.length <= 25</code></li>\n\t<li><code>s</code> 由小写英文字母以及括号 <code>'('</code> 和 <code>')'</code> 组成</li>\n\t<li><code>s</code> 中至多含 <code>20</code> 个括号</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<string> removeInvalidParentheses(string s) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<String> removeInvalidParentheses(String s) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def removeInvalidParentheses(self, s: str) -> List[str]:\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** removeInvalidParentheses(char* s, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<string> RemoveInvalidParentheses(string s) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @return {string[]}\n */\nvar removeInvalidParentheses = function(s) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function removeInvalidParentheses(s: string): string[] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @return String[]\n     */\n    function removeInvalidParentheses($s) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func removeInvalidParentheses(_ s: String) -> [String] {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun removeInvalidParentheses(s: String): List<String> {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<String> removeInvalidParentheses(String s) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func removeInvalidParentheses(s string) []string {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {String[]}\ndef remove_invalid_parentheses(s)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def removeInvalidParentheses(s: String): List[String] = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn remove_invalid_parentheses(s: String) -> Vec<String> {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (remove-invalid-parentheses s)\n  (-> string? (listof string?))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec remove_invalid_parentheses(S :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\nremove_invalid_parentheses(S) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec remove_invalid_parentheses(s :: String.t) :: [String.t]\n  def remove_invalid_parentheses(s) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func removeInvalidParentheses(s: String): ArrayList<String> {\n\n    }\n}"}],"testcase":"\"()())()\"","testable":true,"templateMeta":{"name":"removeInvalidParentheses","params":[{"name":"s","type":"string"}],"return":{"type":"list<string>"}}}