{"id":1047,"fid":"1005","name":"K 次取反后最大化的数组和","slug":"maximize-sum-of-array-after-k-negations","link":"https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations/description/","percent":51.71703763320041,"level":"Easy","category":"algorithms","en_name":"Maximize Sum Of Array After K Negations","cn_name":"K 次取反后最大化的数组和","totalAC":"208.6K","totalSubmit":"402.3K","likes":488,"dislikes":0,"desc":"<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，按以下方法修改该数组：</p>\n\n<ul>\n\t<li>选择某个下标 <code>i</code>&nbsp;并将 <code>nums[i]</code> 替换为 <code>-nums[i]</code> 。</li>\n</ul>\n\n<p>重复这个过程恰好 <code>k</code> 次。可以多次选择同一个下标 <code>i</code> 。</p>\n\n<p>以这种方式修改数组后，返回数组 <strong>可能的最大和</strong> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [4,2,3], k = 1\n<strong>输出：</strong>5\n<strong>解释：</strong>选择下标 1 ，nums 变为 [4,-2,3] 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [3,-1,0,2], k = 3\n<strong>输出：</strong>6\n<strong>解释：</strong>选择下标 (1, 2, 2) ，nums 变为 [3,1,0,2] 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [2,-3,-1,5,-4], k = 2\n<strong>输出：</strong>13\n<strong>解释：</strong>选择下标 (1, 4) ，nums 变为 [2,3,-1,5,4] 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-100 &lt;= nums[i] &lt;= 100</code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int largestSumAfterKNegations(vector<int>& nums, int k) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int largestSumAfterKNegations(int[] nums, int k) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def largestSumAfterKNegations(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def largestSumAfterKNegations(self, nums: List[int], k: int) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int largestSumAfterKNegations(int* nums, int numsSize, int k) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int LargestSumAfterKNegations(int[] nums, int k) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar largestSumAfterKNegations = function(nums, k) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function largestSumAfterKNegations(nums: number[], k: number): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function largestSumAfterKNegations($nums, $k) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func largestSumAfterKNegations(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun largestSumAfterKNegations(nums: IntArray, k: Int): Int {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int largestSumAfterKNegations(List<int> nums, int k) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func largestSumAfterKNegations(nums []int, k int) int {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef largest_sum_after_k_negations(nums, k)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def largestSumAfterKNegations(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn largest_sum_after_k_negations(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (largest-sum-after-k-negations nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec largest_sum_after_k_negations(Nums :: [integer()], K :: integer()) -> integer().\nlargest_sum_after_k_negations(Nums, K) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec largest_sum_after_k_negations(nums :: [integer], k :: integer) :: integer\n  def largest_sum_after_k_negations(nums, k) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func largestSumAfterKNegations(nums: Array<Int64>, k: Int64): Int64 {\n\n    }\n}"}],"testcase":"[4,2,3]\n1","testable":true,"templateMeta":{"name":"largestSumAfterKNegations","params":[{"name":"nums","type":"integer[]"},{"name":"k","type":"integer"}],"return":{"type":"integer"}}}