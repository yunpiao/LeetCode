{"id":621,"fid":"621","name":"任务调度器","slug":"task-scheduler","link":"https://leetcode.cn/problems/task-scheduler/description/","percent":60.3637847518722,"level":"Medium","category":"algorithms","en_name":"Task Scheduler","cn_name":"任务调度器","totalAC":"163K","totalSubmit":"269.6K","likes":1318,"dislikes":0,"desc":"<p>给你一个用字符数组&nbsp;<code>tasks</code> 表示的 CPU 需要执行的任务列表，用字母 A 到 Z 表示，以及一个冷却时间 <code>n</code>。每个周期或时间间隔允许完成一项任务。任务可以按任何顺序完成，但有一个限制：两个<strong> 相同种类</strong> 的任务之间必须有长度为<strong>&nbsp;</strong><code>n</code><strong> </strong>的冷却时间。</p>\n\n<p>返回完成所有任务所需要的<strong> 最短时间间隔</strong>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<div class=\"example-block\"><strong>输入：</strong>tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2</div>\n\n<div class=\"example-block\"><strong>输出：</strong>8</div>\n\n<div class=\"example-block\"><strong>解释：</strong></div>\n\n<div class=\"example-block\">在完成任务 A 之后，你必须等待两个间隔。对任务 B 来说也是一样。在第 3 个间隔，A 和 B 都不能完成，所以你需要待命。在第 4 个间隔，由于已经经过了 2 个间隔，你可以再次执行 A 任务。</div>\n\n<div class=\"example-block\">&nbsp;</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><b>输入：</b>tasks = [\"A\",\"C\",\"A\",\"B\",\"D\",\"B\"], n = 1</p>\n\n<p><b>输出：</b>6</p>\n\n<p><b>解释：</b>一种可能的序列是：A -&gt; B -&gt; C -&gt; D -&gt; A -&gt; B。</p>\n\n<p>由于冷却间隔为 1，你可以在完成另一个任务后重复执行这个任务。</p>\n</div>\n\n<p><strong>示例 3：</strong></p>\n\n<div class=\"example-block\"><strong>输入：</strong>tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 3</div>\n\n<div class=\"example-block\"><strong>输出：</strong>10</div>\n\n<div class=\"example-block\"><strong>解释：</strong>一种可能的序列为：A -&gt; B -&gt; idle -&gt; idle -&gt; A -&gt; B -&gt; idle -&gt; idle -&gt; A -&gt; B。</div>\n\n<div class=\"example-block\">只有两种任务类型，A 和 B，需要被 3 个间隔分割。这导致重复执行这些任务的间隔当中有两次待命状态。</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= tasks.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>tasks[i]</code> 是大写英文字母</li>\n\t<li><code>0 &lt;= n &lt;= 100</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int leastInterval(vector<char>& tasks, int n) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int leastInterval(char[] tasks, int n) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def leastInterval(self, tasks, n):\n        \"\"\"\n        :type tasks: List[str]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def leastInterval(self, tasks: List[str], n: int) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int leastInterval(char* tasks, int tasksSize, int n) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int LeastInterval(char[] tasks, int n) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {character[]} tasks\n * @param {number} n\n * @return {number}\n */\nvar leastInterval = function(tasks, n) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function leastInterval(tasks: string[], n: number): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String[] $tasks\n     * @param Integer $n\n     * @return Integer\n     */\n    function leastInterval($tasks, $n) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func leastInterval(_ tasks: [Character], _ n: Int) -> Int {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun leastInterval(tasks: CharArray, n: Int): Int {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int leastInterval(List<String> tasks, int n) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func leastInterval(tasks []byte, n int) int {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Character[]} tasks\n# @param {Integer} n\n# @return {Integer}\ndef least_interval(tasks, n)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def leastInterval(tasks: Array[Char], n: Int): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn least_interval(tasks: Vec<char>, n: i32) -> i32 {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (least-interval tasks n)\n  (-> (listof char?) exact-integer? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec least_interval(Tasks :: [char()], N :: integer()) -> integer().\nleast_interval(Tasks, N) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec least_interval(tasks :: [char], n :: integer) :: integer\n  def least_interval(tasks, n) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func leastInterval(tasks: Array<Rune>, n: Int64): Int64 {\n\n    }\n}"}],"testcase":"[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]\n2","testable":true,"templateMeta":{"name":"leastInterval","params":[{"name":"tasks","type":"character[]"},{"name":"n","type":"integer"}],"return":{"type":"integer"}}}