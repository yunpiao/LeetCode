{"id":135,"fid":"135","name":"分发糖果","slug":"candy","link":"https://leetcode.cn/problems/candy/description/","percent":48.550659961646744,"level":"Hard","category":"algorithms","en_name":"Candy","cn_name":"分发糖果","totalAC":"402.7K","totalSubmit":"831.5K","likes":1640,"dislikes":0,"desc":"<p><code>n</code> 个孩子站成一排。给你一个整数数组 <code>ratings</code> 表示每个孩子的评分。</p>\n\n<p>你需要按照以下要求，给这些孩子分发糖果：</p>\n\n<ul>\n\t<li>每个孩子至少分配到 <code>1</code> 个糖果。</li>\n\t<li>相邻两个孩子评分更高的孩子会获得更多的糖果。</li>\n</ul>\n\n<p>请你给每个孩子分发糖果，计算并返回需要准备的 <strong>最少糖果数目</strong> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;1：</strong></p>\n\n<pre>\n<strong>输入：</strong>ratings = [1,0,2]\n<strong>输出：</strong>5\n<strong>解释：</strong>你可以分别给第一个、第二个、第三个孩子分发 2、1、2 颗糖果。\n</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre>\n<strong>输入：</strong>ratings = [1,2,2]\n<strong>输出：</strong>4\n<strong>解释：</strong>你可以分别给第一个、第二个、第三个孩子分发 1、2、1 颗糖果。\n     第三个孩子只得到 1 颗糖果，这满足题面中的两个条件。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == ratings.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= ratings[i] &lt;= 2 * 10<sup>4</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int candy(vector<int>& ratings) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int candy(int[] ratings) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def candy(self, ratings: List[int]) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int candy(int* ratings, int ratingsSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int Candy(int[] ratings) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} ratings\n * @return {number}\n */\nvar candy = function(ratings) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function candy(ratings: number[]): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $ratings\n     * @return Integer\n     */\n    function candy($ratings) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func candy(_ ratings: [Int]) -> Int {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun candy(ratings: IntArray): Int {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int candy(List<int> ratings) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func candy(ratings []int) int {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} ratings\n# @return {Integer}\ndef candy(ratings)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def candy(ratings: Array[Int]): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn candy(ratings: Vec<i32>) -> i32 {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (candy ratings)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec candy(Ratings :: [integer()]) -> integer().\ncandy(Ratings) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec candy(ratings :: [integer]) :: integer\n  def candy(ratings) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func candy(ratings: Array<Int64>): Int64 {\n\n    }\n}"}],"testcase":"[1,0,2]","testable":true,"templateMeta":{"name":"candy","params":[{"name":"ratings","type":"integer[]"}],"return":{"type":"integer"}}}