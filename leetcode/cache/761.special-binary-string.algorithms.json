{"id":763,"fid":"761","name":"特殊的二进制序列","slug":"special-binary-string","link":"https://leetcode.cn/problems/special-binary-string/description/","percent":74.86193580533987,"level":"Hard","category":"algorithms","en_name":"Special Binary String","cn_name":"特殊的二进制序列","totalAC":"18K","totalSubmit":"24.1K","likes":238,"dislikes":0,"desc":"<p>特殊的二进制序列是具有以下两个性质的二进制序列：</p>\n\n<ul>\n\t<li>0 的数量与 1 的数量相等。</li>\n\t<li>二进制序列的每一个前缀码中 1 的数量要大于等于 0 的数量。</li>\n</ul>\n\n<p>给定一个特殊的二进制序列&nbsp;<code>S</code>，以字符串形式表示。定义一个<em>操作 </em>为首先选择&nbsp;<code>S</code>&nbsp;的两个连续且非空的特殊的子串，然后将它们交换。（两个子串为连续的当且仅当第一个子串的最后一个字符恰好为第二个子串的第一个字符的前一个字符。)</p>\n\n<p>在任意次数的操作之后，交换后的字符串按照字典序排列的最大的结果是什么？</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> S = &quot;11011000&quot;\n<strong>输出:</strong> &quot;11100100&quot;\n<strong>解释:</strong>\n将子串 &quot;10&quot; （在S[1]出现） 和 &quot;1100&quot; （在S[3]出现）进行交换。\n这是在进行若干次操作后按字典序排列最大的结果。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li><code>S</code>&nbsp;的长度不超过&nbsp;<code>50</code>。</li>\n\t<li><code>S</code>&nbsp;保证为一个满足上述定义的<em>特殊 </em>的二进制序列。</li>\n</ol>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string makeLargestSpecial(string s) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String makeLargestSpecial(String s) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def makeLargestSpecial(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def makeLargestSpecial(self, s: str) -> str:\n        "},{"value":"c","text":"C","defaultCode":"char* makeLargestSpecial(char* s) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string MakeLargestSpecial(string s) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @return {string}\n */\nvar makeLargestSpecial = function(s) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function makeLargestSpecial(s: string): string {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function makeLargestSpecial($s) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func makeLargestSpecial(_ s: String) -> String {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun makeLargestSpecial(s: String): String {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String makeLargestSpecial(String s) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func makeLargestSpecial(s string) string {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {String}\ndef make_largest_special(s)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def makeLargestSpecial(s: String): String = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn make_largest_special(s: String) -> String {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (make-largest-special s)\n  (-> string? string?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec make_largest_special(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmake_largest_special(S) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec make_largest_special(s :: String.t) :: String.t\n  def make_largest_special(s) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func makeLargestSpecial(s: String): String {\n\n    }\n}"}],"testcase":"\"11011000\"","testable":true,"templateMeta":{"name":"makeLargestSpecial","params":[{"name":"s","type":"string"}],"return":{"type":"string"}}}