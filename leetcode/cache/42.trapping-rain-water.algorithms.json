{"id":42,"fid":"42","name":"接雨水","slug":"trapping-rain-water","link":"https://leetcode.cn/problems/trapping-rain-water/description/","percent":64.61772645479157,"level":"Hard","category":"algorithms","en_name":"Trapping Rain Water","cn_name":"接雨水","totalAC":"1.3M","totalSubmit":"2M","likes":5658,"dislikes":0,"desc":"<p>给定&nbsp;<code>n</code> 个非负整数表示每个宽度为 <code>1</code> 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rainwatertrap.png\" style=\"height: 161px; width: 412px;\" /></p>\n\n<pre>\n<strong>输入：</strong>height = [0,1,0,2,1,0,1,3,2,1,2,1]\n<strong>输出：</strong>6\n<strong>解释：</strong>上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 \n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>height = [4,2,0,3,2,5]\n<strong>输出：</strong>9\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == height.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= height[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int trap(vector<int>& height) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int trap(int[] height) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def trap(self, height: List[int]) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int trap(int* height, int heightSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int Trap(int[] height) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} height\n * @return {number}\n */\nvar trap = function(height) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function trap(height: number[]): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $height\n     * @return Integer\n     */\n    function trap($height) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func trap(_ height: [Int]) -> Int {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun trap(height: IntArray): Int {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int trap(List<int> height) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func trap(height []int) int {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} height\n# @return {Integer}\ndef trap(height)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def trap(height: Array[Int]): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn trap(height: Vec<i32>) -> i32 {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (trap height)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec trap(Height :: [integer()]) -> integer().\ntrap(Height) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec trap(height :: [integer]) :: integer\n  def trap(height) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func trap(height: Array<Int64>): Int64 {\n\n    }\n}"}],"testcase":"[0,1,0,2,1,0,1,3,2,1,2,1]","testable":true,"templateMeta":{"name":"trap","params":[{"name":"height","type":"integer[]"}],"return":{"type":"integer"}}}