{"id":1105,"fid":"1035","name":"不相交的线","slug":"uncrossed-lines","link":"https://leetcode.cn/problems/uncrossed-lines/description/","percent":73.95900148960195,"level":"Medium","category":"algorithms","en_name":"Uncrossed Lines","cn_name":"不相交的线","totalAC":"145.1K","totalSubmit":"195.3K","likes":634,"dislikes":0,"desc":"<p>在两条独立的水平线上按给定的顺序写下 <code>nums1</code> 和 <code>nums2</code> 中的整数。</p>\n\n<p>现在，可以绘制一些连接两个数字 <code>nums1[i]</code>&nbsp;和 <code>nums2[j]</code>&nbsp;的直线，这些直线需要同时满足：</p>\n\n<ul>\n\t<li>&nbsp;<code>nums1[i] == nums2[j]</code></li>\n\t<li>且绘制的直线不与任何其他连线（非水平线）相交。</li>\n</ul>\n\n<p>请注意，连线即使在端点也不能相交：每个数字只能属于一条连线。</p>\n\n<p>以这种方法绘制线条，并返回可以绘制的最大连线数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/04/26/142.png\" style=\"width: 400px; height: 286px;\" />\n<pre>\n<strong>输入：</strong>nums1 = <span id=\"example-input-1-1\">[1,4,2]</span>, nums2 = <span id=\"example-input-1-2\">[1,2,4]</span>\n<strong>输出：</strong><span id=\"example-output-1\">2</span>\n<strong>解释：</strong>可以画出两条不交叉的线，如上图所示。 \n但无法画出第三条不相交的直线，因为从 nums1[1]=4 到 nums2[2]=4 的直线将与从 nums1[2]=2 到 nums2[1]=2 的直线相交。\n</pre>\n\n<div>\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums1 = <span id=\"example-input-2-1\">[2,5,1,2,5]</span>, nums2 = <span id=\"example-input-2-2\">[10,5,2,1,5,2]</span>\n<strong>输出：</strong><span id=\"example-output-2\">3</span>\n</pre>\n\n<div>\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums1 = <span id=\"example-input-3-1\">[1,3,7,1,7,5]</span>, nums2 = <span id=\"example-input-3-2\">[1,9,2,5,1]</span>\n<strong>输出：</strong><span id=\"example-output-3\">2</span></pre>\n\n<p>&nbsp;</p>\n</div>\n</div>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 500</code></li>\n\t<li><code>1 &lt;= nums1[i], nums2[j] &lt;= 2000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int maxUncrossedLines(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int maxUncrossedLines(int[] nums1, int[] nums2) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def maxUncrossedLines(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def maxUncrossedLines(self, nums1: List[int], nums2: List[int]) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int maxUncrossedLines(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MaxUncrossedLines(int[] nums1, int[] nums2) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar maxUncrossedLines = function(nums1, nums2) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function maxUncrossedLines(nums1: number[], nums2: number[]): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function maxUncrossedLines($nums1, $nums2) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maxUncrossedLines(_ nums1: [Int], _ nums2: [Int]) -> Int {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun maxUncrossedLines(nums1: IntArray, nums2: IntArray): Int {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int maxUncrossedLines(List<int> nums1, List<int> nums2) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func maxUncrossedLines(nums1 []int, nums2 []int) int {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef max_uncrossed_lines(nums1, nums2)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def maxUncrossedLines(nums1: Array[Int], nums2: Array[Int]): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn max_uncrossed_lines(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (max-uncrossed-lines nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec max_uncrossed_lines(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\nmax_uncrossed_lines(Nums1, Nums2) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec max_uncrossed_lines(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def max_uncrossed_lines(nums1, nums2) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func maxUncrossedLines(nums1: Array<Int64>, nums2: Array<Int64>): Int64 {\n\n    }\n}"}],"testcase":"[1,4,2]\n[1,2,4]","testable":true,"templateMeta":{"name":"maxUncrossedLines","params":[{"name":"nums1","type":"integer[]"},{"name":"nums2","type":"integer[]"}],"return":{"type":"integer"}}}