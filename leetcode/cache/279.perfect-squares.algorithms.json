{"id":279,"fid":"279","name":"完全平方数","slug":"perfect-squares","link":"https://leetcode.cn/problems/perfect-squares/description/","percent":67.70317430911686,"level":"Medium","category":"algorithms","en_name":"Perfect Squares","cn_name":"完全平方数","totalAC":"659.4K","totalSubmit":"971.3K","likes":2126,"dislikes":0,"desc":"<p>给你一个整数 <code>n</code> ，返回 <em>和为 <code>n</code> 的完全平方数的最少数量</em> 。</p>\n\n<p><strong>完全平方数</strong> 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，<code>1</code>、<code>4</code>、<code>9</code> 和 <code>16</code> 都是完全平方数，而 <code>3</code> 和 <code>11</code> 不是。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;1：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = <code>12</code>\n<strong>输出：</strong>3 \n<strong>解释：</strong><code>12 = 4 + 4 + 4</code></pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = <code>13</code>\n<strong>输出：</strong>2\n<strong>解释：</strong><code>13 = 4 + 9</code></pre>\n&nbsp;\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int numSquares(int n) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int numSquares(int n) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def numSquares(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def numSquares(self, n: int) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int numSquares(int n) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int NumSquares(int n) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} n\n * @return {number}\n */\nvar numSquares = function(n) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function numSquares(n: number): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function numSquares($n) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numSquares(_ n: Int) -> Int {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun numSquares(n: Int): Int {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int numSquares(int n) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func numSquares(n int) int {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\n# @return {Integer}\ndef num_squares(n)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def numSquares(n: Int): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn num_squares(n: i32) -> i32 {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (num-squares n)\n  (-> exact-integer? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec num_squares(N :: integer()) -> integer().\nnum_squares(N) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec num_squares(n :: integer) :: integer\n  def num_squares(n) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func numSquares(n: Int64): Int64 {\n\n    }\n}"}],"testcase":"12","testable":true,"templateMeta":{"name":"numSquares","params":[{"name":"n","type":"integer"}],"return":{"type":"integer"}}}