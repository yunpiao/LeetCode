{"id":221,"fid":"221","name":"最大正方形","slug":"maximal-square","link":"https://leetcode.cn/problems/maximal-square/description/","percent":51.02207254332329,"level":"Medium","category":"algorithms","en_name":"Maximal Square","cn_name":"最大正方形","totalAC":"385K","totalSubmit":"750.6K","likes":1781,"dislikes":0,"desc":"<p>在一个由 <code>'0'</code> 和 <code>'1'</code> 组成的二维矩阵内，找到只包含 <code>'1'</code> 的最大正方形，并返回其面积。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg\" style=\"width: 400px; height: 319px;\" />\n<pre>\n<strong>输入：</strong>matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\n<strong>输出：</strong>4\n</pre>\n\n<p><strong>示例 2：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/26/max2grid.jpg\" style=\"width: 165px; height: 165px;\" />\n<pre>\n<strong>输入：</strong>matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]\n<strong>输出：</strong>1\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>matrix = [[\"0\"]]\n<strong>输出：</strong>0\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 <= m, n <= 300</code></li>\n\t<li><code>matrix[i][j]</code> 为 <code>'0'</code> 或 <code>'1'</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int maximalSquare(vector<vector<char>>& matrix) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int maximalSquare(char[][] matrix) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def maximalSquare(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def maximalSquare(self, matrix: List[List[str]]) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int maximalSquare(char** matrix, int matrixSize, int* matrixColSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MaximalSquare(char[][] matrix) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {character[][]} matrix\n * @return {number}\n */\nvar maximalSquare = function(matrix) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function maximalSquare(matrix: string[][]): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String[][] $matrix\n     * @return Integer\n     */\n    function maximalSquare($matrix) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maximalSquare(_ matrix: [[Character]]) -> Int {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun maximalSquare(matrix: Array<CharArray>): Int {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int maximalSquare(List<List<String>> matrix) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func maximalSquare(matrix [][]byte) int {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Character[][]} matrix\n# @return {Integer}\ndef maximal_square(matrix)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def maximalSquare(matrix: Array[Array[Char]]): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn maximal_square(matrix: Vec<Vec<char>>) -> i32 {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (maximal-square matrix)\n  (-> (listof (listof char?)) exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec maximal_square(Matrix :: [[char()]]) -> integer().\nmaximal_square(Matrix) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec maximal_square(matrix :: [[char]]) :: integer\n  def maximal_square(matrix) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func maximalSquare(matrix: Array<Array<Rune>>): Int64 {\n\n    }\n}"}],"testcase":"[[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]","testable":true,"templateMeta":{"name":"maximalSquare","params":[{"name":"matrix","type":"character[][]"}],"return":{"type":"integer"}}}