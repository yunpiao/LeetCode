{"id":17,"fid":"17","name":"电话号码的字母组合","slug":"letter-combinations-of-a-phone-number","link":"https://leetcode.cn/problems/letter-combinations-of-a-phone-number/description/","percent":61.25437251505075,"level":"Medium","category":"algorithms","en_name":"Letter Combinations of a Phone Number","cn_name":"电话号码的字母组合","totalAC":"1M","totalSubmit":"1.7M","likes":2991,"dislikes":0,"desc":"<p>给定一个仅包含数字&nbsp;<code>2-9</code>&nbsp;的字符串，返回所有它能表示的字母组合。答案可以按 <strong>任意顺序</strong> 返回。</p>\n\n<p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/11/09/200px-telephone-keypad2svg.png\" style=\"width: 200px;\" /></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>digits = \"23\"\n<strong>输出：</strong>[\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>digits = \"\"\n<strong>输出：</strong>[]\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>digits = \"2\"\n<strong>输出：</strong>[\"a\",\"b\",\"c\"]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= digits.length &lt;= 4</code></li>\n\t<li><code>digits[i]</code> 是范围 <code>['2', '9']</code> 的一个数字。</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<string> letterCombinations(string digits) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<String> letterCombinations(String digits) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** letterCombinations(char* digits, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<string> LetterCombinations(string digits) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} digits\n * @return {string[]}\n */\nvar letterCombinations = function(digits) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function letterCombinations(digits: string): string[] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $digits\n     * @return String[]\n     */\n    function letterCombinations($digits) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func letterCombinations(_ digits: String) -> [String] {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun letterCombinations(digits: String): List<String> {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<String> letterCombinations(String digits) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func letterCombinations(digits string) []string {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} digits\n# @return {String[]}\ndef letter_combinations(digits)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def letterCombinations(digits: String): List[String] = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn letter_combinations(digits: String) -> Vec<String> {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (letter-combinations digits)\n  (-> string? (listof string?))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec letter_combinations(Digits :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\nletter_combinations(Digits) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec letter_combinations(digits :: String.t) :: [String.t]\n  def letter_combinations(digits) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func letterCombinations(digits: String): ArrayList<String> {\n\n    }\n}"}],"testcase":"\"23\"","testable":true,"templateMeta":{"name":"letterCombinations","params":[{"name":"digits","type":"string"}],"return":{"type":"list<string>"}}}